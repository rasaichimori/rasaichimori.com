'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProgressBar = function () {
	function ProgressBar(_ref) {
		var _this = this;

		var _ref$className = _ref.className,
		    className = _ref$className === undefined ? null : _ref$className,
		    _ref$animationDuratio = _ref.animationDuration,
		    animationDuration = _ref$animationDuratio === undefined ? null : _ref$animationDuratio;

		_classCallCheck(this, ProgressBar);

		this.className = 'progress-bar';
		this.animationDuration = 300;
		this.minValue = 0.1;
		this.stylesheetElement = null;
		this.progressElement = null;
		this.hiding = false;
		this.trickleInterval = null;
		this.value = 0;
		this.visible = false;

		this.trickle = function () {
			var advance = Math.random() * 3 / 100;
			_this.setValue(_this.value + advance);
		};

		if (className !== null) {
			this.className = className;
		}
		if (animationDuration !== null) {
			this.animationDuration = animationDuration;
		}

		this.stylesheetElement = this.createStylesheetElement();
		this.progressElement = this.createProgressElement();
	} // ms


	_createClass(ProgressBar, [{
		key: 'show',
		value: function show() {
			if (!this.visible) {
				this.visible = true;
				this.installStylesheetElement();
				this.installProgressElement();
				this.startTrickling();
			}
		}
	}, {
		key: 'hide',
		value: function hide() {
			var _this2 = this;

			if (this.visible && !this.hiding) {
				this.hiding = true;
				this.fadeProgressElement(function () {
					_this2.uninstallProgressElement();
					_this2.stopTrickling();
					_this2.visible = false;
					_this2.hiding = false;
				});
			}
		}
	}, {
		key: 'setValue',
		value: function setValue(value) {
			this.value = Math.max(this.minValue, value);
			this.refresh();
		}

		// Private

	}, {
		key: 'installStylesheetElement',
		value: function installStylesheetElement() {
			document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
		}
	}, {
		key: 'installProgressElement',
		value: function installProgressElement() {
			this.progressElement.style.width = '0';
			this.progressElement.style.opacity = '1';
			document.documentElement.insertBefore(this.progressElement, document.body);
			this.refresh();
		}
	}, {
		key: 'fadeProgressElement',
		value: function fadeProgressElement(callback) {
			this.progressElement.style.opacity = '0';
			setTimeout(callback, this.animationDuration * 1.5);
		}
	}, {
		key: 'uninstallProgressElement',
		value: function uninstallProgressElement() {
			if (this.progressElement.parentNode) {
				document.documentElement.removeChild(this.progressElement);
			}
		}
	}, {
		key: 'startTrickling',
		value: function startTrickling() {
			if (!this.trickleInterval) {
				this.trickleInterval = window.setInterval(this.trickle, this.animationDuration);
			}
		}
	}, {
		key: 'stopTrickling',
		value: function stopTrickling() {
			window.clearInterval(this.trickleInterval);
			delete this.trickleInterval;
		}
	}, {
		key: 'refresh',
		value: function refresh() {
			var _this3 = this;

			requestAnimationFrame(function () {
				_this3.progressElement.style.width = 10 + _this3.value * 90 + '%';
			});
		}
	}, {
		key: 'createStylesheetElement',
		value: function createStylesheetElement() {
			var element = document.createElement('style');
			element.setAttribute('data-progressbar-styles', '');
			element.textContent = this.defaultCSS;
			return element;
		}
	}, {
		key: 'createProgressElement',
		value: function createProgressElement() {
			var element = document.createElement('div');
			element.className = this.className;
			return element;
		}
	}, {
		key: 'defaultCSS',
		get: function get() {
			return '\n    .' + this.className + ' {\n        position: fixed;\n        display: block;\n        top: 0;\n        left: 0;\n        height: 3px;\n        background-color: black;\n        z-index: 9999;\n        transition:\n          width ' + this.animationDuration + 'ms ease-out,\n          opacity ' + this.animationDuration / 2 + 'ms ' + this.animationDuration / 2 + 'ms ease-in;\n        transform: translate3d(0, 0, 0);\n      }\n    ';
		}
	}]);

	return ProgressBar;
}();

exports.default = ProgressBar;